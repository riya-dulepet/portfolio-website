{"ast":null,"code":"/**\n * Copyright IBM Corp. 2015, 2020\n *\n * This source code is licensed under the Apache-2.0 license found in the\n * LICENSE file in the root directory of this source tree.\n */\nconst enabled$1 = {};\n\ntry {\n  if (process.env.CARBON_ENABLE_CSS_CUSTOM_PROPERTIES) {\n    if (process.env.CARBON_ENABLE_CSS_CUSTOM_PROPERTIES === 'true') {\n      enabled$1.enableCssCustomProperties = true;\n    } else {\n      enabled$1.enableCssCustomProperties = false;\n    }\n  } else {\n    enabled$1.enableCssCustomProperties = false;\n  }\n\n  if (process.env.CARBON_ENABLE_USE_CONTROLLED_STATE_WITH_VALUE) {\n    if (process.env.CARBON_ENABLE_USE_CONTROLLED_STATE_WITH_VALUE === 'true') {\n      enabled$1.enableUseControlledStateWithValue = true;\n    } else {\n      enabled$1.enableUseControlledStateWithValue = false;\n    }\n  } else {\n    enabled$1.enableUseControlledStateWithValue = false;\n  }\n\n  if (process.env.CARBON_ENABLE_CSS_GRID) {\n    if (process.env.CARBON_ENABLE_CSS_GRID === 'true') {\n      enabled$1.enableCssGrid = true;\n    } else {\n      enabled$1.enableCssGrid = false;\n    }\n  } else {\n    enabled$1.enableCssGrid = false;\n  }\n\n  if (process.env.CARBON_ENABLE_V11_RELEASE) {\n    if (process.env.CARBON_ENABLE_V11_RELEASE === 'true') {\n      enabled$1.enableV11Release = true;\n    } else {\n      enabled$1.enableV11Release = false;\n    }\n  } else {\n    enabled$1.enableV11Release = false;\n  }\n} catch (error) {\n  enabled$1.enableCssCustomProperties = false;\n  enabled$1.enableUseControlledStateWithValue = false;\n  enabled$1.enableCssGrid = false;\n  enabled$1.enableV11Release = false;\n}\n\nconst featureFlagInfo = [{\n  name: \"enable-css-custom-properties\",\n  description: \"Describe what the flag does\",\n  enabled: enabled$1.enableCssCustomProperties\n}, {\n  name: \"enable-use-controlled-state-with-value\",\n  description: \"Enable components to be created in either a controlled or uncontrolled mode\\n\",\n  enabled: enabled$1.enableUseControlledStateWithValue\n}, {\n  name: \"enable-css-grid\",\n  description: \"Enable CSS Grid Layout in the Grid and Column React components\\n\",\n  enabled: enabled$1.enableCssGrid\n}, {\n  name: \"enable-v11-release\",\n  description: \"Enable the features and functionality for the v11 Release\\n\",\n  enabled: enabled$1.enableV11Release\n}];\n\nclass FeatureFlagScope {\n  constructor(flags) {\n    this.flags = new Map();\n\n    if (flags) {\n      Object.keys(flags).forEach(key => {\n        this.flags.set(key, flags[key]);\n      });\n    }\n  }\n  /**\n   * Check to see if a flag exists\n   * @param {string} name\n   */\n\n\n  checkForFlag(name) {\n    if (!this.flags.has(name)) {\n      throw new Error(`Unable to find a feature flag with the name: \\`${name}\\``);\n    }\n  }\n  /**\n   * Add a feature flag\n   * @param {string} name\n   * @param {boolean} enabled\n   */\n\n\n  add(name, enabled) {\n    if (this.flags.has(name)) {\n      throw new Error(`The feature flag: ${name} already exists`);\n    }\n\n    this.flags.set(name, enabled);\n  }\n  /**\n   * Enable a feature flag\n   * @param {string} name\n   */\n\n\n  enable(name) {\n    this.checkForFlag(name);\n    this.flags.set(name, true);\n  }\n  /**\n   * Disable a feature flag\n   * @param {string} name\n   */\n\n\n  disable(name) {\n    this.checkForFlag(name);\n    this.flags.set(name, false);\n  }\n  /**\n   * Merge the given feature flags with the current set of feature flags.\n   * Duplicate keys will be set to the value in the given feature flags.\n   * @param {object} flags\n   */\n\n\n  merge(flags) {\n    Object.keys(flags).forEach(key => {\n      this.flags.set(key, flags[key]);\n    });\n  }\n  /**\n   * @param {FeatureFlagScope} scope\n   */\n\n\n  mergeWithScope(scope) {\n    for (const [key, value] of scope.flags) {\n      if (this.flags.has(key)) {\n        continue;\n      }\n\n      this.flags.set(key, value);\n    }\n  }\n  /**\n   * Check if a feature flag is enabled\n   * @param {string} name\n   * @returns {boolean}\n   */\n\n\n  enabled(name) {\n    this.checkForFlag(name);\n    return this.flags.get(name);\n  }\n\n}\n\nconst FeatureFlags = createScope();\n\nfor (let i = 0; i < featureFlagInfo.length; i++) {\n  const featureFlag = featureFlagInfo[i];\n  FeatureFlags.add(featureFlag.name, featureFlag.enabled);\n}\n\nfunction createScope(flags) {\n  return new FeatureFlagScope(flags);\n}\n\nfunction add(...args) {\n  return FeatureFlags.add(...args);\n}\n\nfunction enable(...args) {\n  return FeatureFlags.enable(...args);\n}\n\nfunction disable(...args) {\n  return FeatureFlags.disable(...args);\n}\n\nfunction enabled(...args) {\n  return FeatureFlags.enabled(...args);\n}\n\nfunction merge(...args) {\n  return FeatureFlags.merge(...args);\n}\n\nexport { FeatureFlags, add, createScope, disable, enable, enabled, merge };","map":null,"metadata":{},"sourceType":"module"}