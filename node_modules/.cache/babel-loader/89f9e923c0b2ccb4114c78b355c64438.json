{"ast":null,"code":"import _slicedToArray from \"/Users/rajivdulepet/Desktop/portfolio-create-react-app-master/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/slicedToArray\";\nimport _createForOfIteratorHelper from \"/Users/rajivdulepet/Desktop/portfolio-create-react-app-master/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/createForOfIteratorHelper\";\nimport _classCallCheck from \"/Users/rajivdulepet/Desktop/portfolio-create-react-app-master/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/classCallCheck\";\nimport _createClass from \"/Users/rajivdulepet/Desktop/portfolio-create-react-app-master/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/createClass\";\n\n/**\n * Copyright IBM Corp. 2015, 2020\n *\n * This source code is licensed under the Apache-2.0 license found in the\n * LICENSE file in the root directory of this source tree.\n */\nvar enabled$1 = {};\n\ntry {\n  if (process.env.CARBON_ENABLE_CSS_CUSTOM_PROPERTIES) {\n    if (process.env.CARBON_ENABLE_CSS_CUSTOM_PROPERTIES === 'true') {\n      enabled$1.enableCssCustomProperties = true;\n    } else {\n      enabled$1.enableCssCustomProperties = false;\n    }\n  } else {\n    enabled$1.enableCssCustomProperties = false;\n  }\n\n  if (process.env.CARBON_ENABLE_USE_CONTROLLED_STATE_WITH_VALUE) {\n    if (process.env.CARBON_ENABLE_USE_CONTROLLED_STATE_WITH_VALUE === 'true') {\n      enabled$1.enableUseControlledStateWithValue = true;\n    } else {\n      enabled$1.enableUseControlledStateWithValue = false;\n    }\n  } else {\n    enabled$1.enableUseControlledStateWithValue = false;\n  }\n\n  if (process.env.CARBON_ENABLE_CSS_GRID) {\n    if (process.env.CARBON_ENABLE_CSS_GRID === 'true') {\n      enabled$1.enableCssGrid = true;\n    } else {\n      enabled$1.enableCssGrid = false;\n    }\n  } else {\n    enabled$1.enableCssGrid = false;\n  }\n\n  if (process.env.CARBON_ENABLE_V11_RELEASE) {\n    if (process.env.CARBON_ENABLE_V11_RELEASE === 'true') {\n      enabled$1.enableV11Release = true;\n    } else {\n      enabled$1.enableV11Release = false;\n    }\n  } else {\n    enabled$1.enableV11Release = false;\n  }\n} catch (error) {\n  enabled$1.enableCssCustomProperties = false;\n  enabled$1.enableUseControlledStateWithValue = false;\n  enabled$1.enableCssGrid = false;\n  enabled$1.enableV11Release = false;\n}\n\nvar featureFlagInfo = [{\n  name: \"enable-css-custom-properties\",\n  description: \"Describe what the flag does\",\n  enabled: enabled$1.enableCssCustomProperties\n}, {\n  name: \"enable-use-controlled-state-with-value\",\n  description: \"Enable components to be created in either a controlled or uncontrolled mode\\n\",\n  enabled: enabled$1.enableUseControlledStateWithValue\n}, {\n  name: \"enable-css-grid\",\n  description: \"Enable CSS Grid Layout in the Grid and Column React components\\n\",\n  enabled: enabled$1.enableCssGrid\n}, {\n  name: \"enable-v11-release\",\n  description: \"Enable the features and functionality for the v11 Release\\n\",\n  enabled: enabled$1.enableV11Release\n}];\n\nvar FeatureFlagScope = /*#__PURE__*/function () {\n  function FeatureFlagScope(flags) {\n    var _this = this;\n\n    _classCallCheck(this, FeatureFlagScope);\n\n    this.flags = new Map();\n\n    if (flags) {\n      Object.keys(flags).forEach(function (key) {\n        _this.flags.set(key, flags[key]);\n      });\n    }\n  }\n  /**\n   * Check to see if a flag exists\n   * @param {string} name\n   */\n\n\n  _createClass(FeatureFlagScope, [{\n    key: \"checkForFlag\",\n    value: function checkForFlag(name) {\n      if (!this.flags.has(name)) {\n        throw new Error(\"Unable to find a feature flag with the name: `\".concat(name, \"`\"));\n      }\n    }\n    /**\n     * Add a feature flag\n     * @param {string} name\n     * @param {boolean} enabled\n     */\n\n  }, {\n    key: \"add\",\n    value: function add(name, enabled) {\n      if (this.flags.has(name)) {\n        throw new Error(\"The feature flag: \".concat(name, \" already exists\"));\n      }\n\n      this.flags.set(name, enabled);\n    }\n    /**\n     * Enable a feature flag\n     * @param {string} name\n     */\n\n  }, {\n    key: \"enable\",\n    value: function enable(name) {\n      this.checkForFlag(name);\n      this.flags.set(name, true);\n    }\n    /**\n     * Disable a feature flag\n     * @param {string} name\n     */\n\n  }, {\n    key: \"disable\",\n    value: function disable(name) {\n      this.checkForFlag(name);\n      this.flags.set(name, false);\n    }\n    /**\n     * Merge the given feature flags with the current set of feature flags.\n     * Duplicate keys will be set to the value in the given feature flags.\n     * @param {object} flags\n     */\n\n  }, {\n    key: \"merge\",\n    value: function merge(flags) {\n      var _this2 = this;\n\n      Object.keys(flags).forEach(function (key) {\n        _this2.flags.set(key, flags[key]);\n      });\n    }\n    /**\n     * @param {FeatureFlagScope} scope\n     */\n\n  }, {\n    key: \"mergeWithScope\",\n    value: function mergeWithScope(scope) {\n      var _iterator = _createForOfIteratorHelper(scope.flags),\n          _step;\n\n      try {\n        for (_iterator.s(); !(_step = _iterator.n()).done;) {\n          var _step$value = _slicedToArray(_step.value, 2),\n              key = _step$value[0],\n              value = _step$value[1];\n\n          if (this.flags.has(key)) {\n            continue;\n          }\n\n          this.flags.set(key, value);\n        }\n      } catch (err) {\n        _iterator.e(err);\n      } finally {\n        _iterator.f();\n      }\n    }\n    /**\n     * Check if a feature flag is enabled\n     * @param {string} name\n     * @returns {boolean}\n     */\n\n  }, {\n    key: \"enabled\",\n    value: function enabled(name) {\n      this.checkForFlag(name);\n      return this.flags.get(name);\n    }\n  }]);\n\n  return FeatureFlagScope;\n}();\n\nvar FeatureFlags = createScope();\n\nfor (var i = 0; i < featureFlagInfo.length; i++) {\n  var featureFlag = featureFlagInfo[i];\n  FeatureFlags.add(featureFlag.name, featureFlag.enabled);\n}\n\nfunction createScope(flags) {\n  return new FeatureFlagScope(flags);\n}\n\nfunction add() {\n  return FeatureFlags.add.apply(FeatureFlags, arguments);\n}\n\nfunction enable() {\n  return FeatureFlags.enable.apply(FeatureFlags, arguments);\n}\n\nfunction disable() {\n  return FeatureFlags.disable.apply(FeatureFlags, arguments);\n}\n\nfunction enabled() {\n  return FeatureFlags.enabled.apply(FeatureFlags, arguments);\n}\n\nfunction merge() {\n  return FeatureFlags.merge.apply(FeatureFlags, arguments);\n}\n\nexport { FeatureFlags, add, createScope, disable, enable, enabled, merge };","map":null,"metadata":{},"sourceType":"module"}